<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>password_test</title>
    <url>/2022/02/05/password-test/</url>
    <content><![CDATA[<span id="more"></span>





<p>this is a test!!!</p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>给hexo更换主题</title>
    <url>/2022/02/03/%E7%BB%99hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li>给hexo换了个主题，但是github页面刷新似乎很慢啊</li>
</ul>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>用FSM实现cdecl</title>
    <url>/2022/02/04/%E7%94%A8FSM%E5%AE%9E%E7%8E%B0cdecl/</url>
    <content><![CDATA[<p><strong>摘抄自《C语言专家编程》</strong></p>
<span id="more"></span>

<ul>
<li><p>添加atoi()的头文件</p>
</li>
<li><p>把this改成了thisss</p>
</li>
<li><p>运行环境 gcc</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXTOKENS 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXTOKENLEN 64</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">type_tag</span> &#123;</span> IDENTIFIER,QUALIFIER,TYPE&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">token</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> type;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">string</span>[MAXTOKENLEN];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在第一个标识符(identifier)前保存所有的标记(token)*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">token</span> <span class="title">stack</span>[<span class="title">MAXTOKENS</span>];</span></span><br><span class="line"><span class="comment">/*保存刚读入的标记*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">token</span> <span class="title">thisss</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pop stack[top--]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> push(s) stack[++top]=s</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">enum</span> type_tag <span class="title">classify_string</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*判断标识符的类型*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *s = thisss.<span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;const&quot;</span>))     &#123;<span class="built_in">strcpy</span>(s,<span class="string">&quot;read-only&quot;</span>);<span class="keyword">return</span> QUALIFIER;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;volatile&quot;</span>))  &#123;<span class="keyword">return</span> QUALIFIER;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;void&quot;</span>))      &#123;<span class="keyword">return</span> TYPE;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;char&quot;</span>))      &#123;<span class="keyword">return</span> TYPE;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;signed&quot;</span>))    &#123;<span class="keyword">return</span> TYPE;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;unsigned&quot;</span>))  &#123;<span class="keyword">return</span> TYPE;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;short&quot;</span>))     &#123;<span class="keyword">return</span> TYPE;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;int&quot;</span>))       &#123;<span class="keyword">return</span> TYPE;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;long&quot;</span>))      &#123;<span class="keyword">return</span> TYPE;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;float&quot;</span>))     &#123;<span class="keyword">return</span> TYPE;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;double&quot;</span>))    &#123;<span class="keyword">return</span> TYPE;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;struct&quot;</span>))    &#123;<span class="keyword">return</span> TYPE;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;union&quot;</span>))     &#123;<span class="keyword">return</span> TYPE;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s,<span class="string">&quot;enum&quot;</span>))      &#123;<span class="keyword">return</span> TYPE;&#125;</span><br><span class="line">    <span class="keyword">return</span> IDENTIFIER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gettoken</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*读入下一个标记，保存在&quot;thisss&quot;中*/</span></span><br><span class="line">    <span class="keyword">char</span> *p = thisss.<span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/*略过所有的空白字符*/</span></span><br><span class="line">    <span class="keyword">while</span>((*p = getchar()) == <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isalnum</span>(*p))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*在标识符中读入A-Z,1-9字符*/</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isalnum</span>( *++p = getchar() ) );</span><br><span class="line">        ungetc(*p,<span class="built_in">stdin</span>);</span><br><span class="line">        *p = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        thisss.type = classify_string();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    thisss.<span class="built_in">string</span>[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    thisss.type = *p;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span>, <span class="title">get_array</span><span class="params">()</span>, <span class="title">get_params</span><span class="params">()</span>, <span class="title">get_lparen</span><span class="params">()</span>, <span class="title">get_ptr_part</span><span class="params">()</span>, <span class="title">get_type</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (*nextstate)(<span class="keyword">void</span>) = initialize;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"><span class="comment">/*用有限状态机实现的cdecl*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*在不同的状态中转换，直到指针为NULL*/</span></span><br><span class="line">    <span class="keyword">while</span>(nextstate != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        (*nextstate)();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gettoken();</span><br><span class="line">    <span class="keyword">while</span>(thisss.type != IDENTIFIER)</span><br><span class="line">    &#123;</span><br><span class="line">        push(thisss);</span><br><span class="line">        gettoken();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s is&quot;</span>,thisss.<span class="built_in">string</span>);</span><br><span class="line">    gettoken();</span><br><span class="line">    nextstate = get_array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nextstate = get_params;</span><br><span class="line">    <span class="keyword">while</span>(thisss.type == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;array &quot;</span>);</span><br><span class="line">        gettoken();<span class="comment">/*一个数字或&#x27;]&#x27;*/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(thisss.<span class="built_in">string</span>[<span class="number">0</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0..%d\n&quot;</span>, atoi(thisss.<span class="built_in">string</span>) - <span class="number">1</span> );</span><br><span class="line">            gettoken();<span class="comment">/*读取&#x27;]&#x27;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        gettoken();<span class="comment">/*在&#x27;]&#x27;之后读取*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;of &quot;</span>);</span><br><span class="line">        nextstate = get_lparen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_params</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nextstate = get_lparen;</span><br><span class="line">    <span class="keyword">if</span> (thisss.type == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(thisss.type != <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            gettoken();</span><br><span class="line">        &#125;</span><br><span class="line">        gettoken();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;function returning &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_lparen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nextstate = get_ptr_part;</span><br><span class="line">    <span class="keyword">if</span> (top &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">stack</span>[top].type == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pop;</span><br><span class="line">            gettoken();<span class="comment">/*在&#x27;)&#x27;之后读取*/</span></span><br><span class="line">            nextstate = get_array;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ptr_part</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nextstate = get_type;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>[top].type == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pointer to &quot;</span>);</span><br><span class="line">        pop;</span><br><span class="line">        nextstate = get_lparen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">stack</span>[top].type == QUALIFIER)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, pop.<span class="built_in">string</span>);</span><br><span class="line">        nextstate = get_lparen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_type</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nextstate = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">/*处理在读入标识符之前被放在堆栈里的所有标记*/</span></span><br><span class="line">    <span class="keyword">while</span>(top &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, pop.<span class="built_in">string</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>FSM</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2022/02/03/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>​            <span id="more"></span></p>
<ul>
<li>属于第二次尝试了，之前是刚放寒假，因为要看与比赛相关的东西，所以不敢太放肆看这种，遇到了问题也没解决。</li>
<li>刚做完手术，今天好了很多，趁着劲头再看了一次同学发的教程，其实这个教程多少有点过时了，node的版本太低，一些关键的点又不说，github的默认分支又和教程的不一样，折腾了一个晚上才弄好。</li>
</ul>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
</search>
